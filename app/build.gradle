plugins {
    id 'com.github.triplet.play' version '2.3.0' apply false
}
apply plugin: 'com.android.application'
apply from: "$project.rootDir/script-git-version.gradle"

def isRunningOnTravis = System.getenv("CI") == "true"

if (isRunningOnTravis) {
    apply plugin: 'com.github.triplet.play'
}

android {

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.mobilegenomics.f5n"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode gitVersionCode

        if (isRunningOnTravis) {
            versionName gitVersionName
        } else {
            versionName "${gitBranch}-${gitCommitHash}"
        }

        setProperty("archivesBaseName", "mobilegenomics-f5n-v$versionName")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../keystore.jks")
        signingConfigs.release.storePassword = System.getenv("keystore_password")
        signingConfigs.release.keyAlias = System.getenv("keystore_alias")
        signingConfigs.release.keyPassword = System.getenv("keystore_alias_password")
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    splits {
        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for certain architectures.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

if (isRunningOnTravis) {
    play {
        track = "beta"
        userFraction = 1
        serviceAccountEmail = System.getenv("SERVICE_ACCOUNT_NAME")
        serviceAccountCredentials = file("../play.p12")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.github.hedzr:android-file-chooser:v1.2.0-final'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "net.gotev:uploadservice:3.5.2"
    implementation 'com.liulishuo.okdownload:okdownload:1.0.5'
    implementation 'com.liulishuo.okdownload:sqlite:1.0.5'
    implementation 'com.liulishuo.okdownload:okhttp:1.0.5'
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    implementation 'commons-net:commons-net:3.6'
}
